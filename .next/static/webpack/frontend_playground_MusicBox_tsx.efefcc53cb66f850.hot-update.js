"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("frontend_playground_MusicBox_tsx",{

/***/ "./frontend/playground/Sound.ts":
/*!**************************************!*\
  !*** ./frontend/playground/Sound.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"playEffectts\": function() { return /* binding */ playEffectts; },\n/* harmony export */   \"playInstruments\": function() { return /* binding */ playInstruments; },\n/* harmony export */   \"playSampler\": function() { return /* binding */ playSampler; },\n/* harmony export */   \"playSamples\": function() { return /* binding */ playSamples; },\n/* harmony export */   \"playScheduling\": function() { return /* binding */ playScheduling; },\n/* harmony export */   \"playSignal\": function() { return /* binding */ playSignal; },\n/* harmony export */   \"playSimple\": function() { return /* binding */ playSimple; },\n/* harmony export */   \"playSquence\": function() { return /* binding */ playSquence; },\n/* harmony export */   \"playTimeControl\": function() { return /* binding */ playTimeControl; }\n/* harmony export */ });\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"./node_modules/tone/build/esm/index.js\");\n/* harmony import */ var _Visuals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Visuals */ \"./frontend/playground/Visuals.ts\");\n/* harmony import */ var _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data/CGMdata1 */ \"./frontend/playground/data/CGMdata1.ts\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);\n\n\n //here is where I can load different data sets\n\n//BG array - this works, but there might be a more elegant way, and I need to decide whether to actually remove the null values or not\n//from Luciano: const glucoseValues = data.filter((value) => value.glucose !== null)\nlet glucoseValues = _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data.filter((value)=>value.glucose > 0).map((value)=>value.glucose);\nglucoseValues = glucoseValues.filter(Number);\n// glucoseValues.forEach((item, index) => {\n//   console.log(item, index);\n// });\n// console.log(glucoseValues.reduce((previousValue, currentValue)=>previousValue + currentValue, 0));\nlet midGlucose = glucoseValues.at(Math.floor(glucoseValues.length / 2));\nvar _glucoseValues_reduce;\n//@ts-ignore\n// let avgGlucose = ((glucoseValues.reduce((previousValue, currentValue) => previousValue + currentValue, 0))/glucoseValues.length);\nlet avgGlucose = ((_glucoseValues_reduce = glucoseValues.reduce((previousValue, currentValue)=>(previousValue !== null && previousValue !== void 0 ? previousValue : 0) + (currentValue !== null && currentValue !== void 0 ? currentValue : 0), 0)) !== null && _glucoseValues_reduce !== void 0 ? _glucoseValues_reduce : 1) / glucoseValues.length;\n//@ts-ignore\nlet calcMode = (Math.round(midGlucose % 1 * 10) + Math.floor(midGlucose)) % 7;\nlet calcKey = (Math.round(avgGlucose % 1 * 10) + Math.floor(avgGlucose)) % 12;\nlet bpmIndex = 0;\nlet bpmRange = [\n    120,\n    220\n];\n//@ts-ignore\nlet calcBPM = convertRange((Math.round(glucoseValues.at(bpmIndex) % 1 * 10) + Math.floor(glucoseValues.at(bpmIndex))) % 20, [\n    0,\n    20\n], bpmRange);\nconsole.log(\"Mode # = \" + calcMode);\nconsole.log(\"Key # = \" + calcKey);\nconsole.log(\"BPM = \" + calcBPM);\n//create a reordered array for CGM data playback, intersperses groups of 3\nlet interBGArray = [];\nlet interJump = Math.floor(glucoseValues.length / 3);\nlet partArray1 = glucoseValues.slice(0, interJump);\nlet partArray2 = glucoseValues.slice(interJump, interJump * 2);\nlet partArray3 = glucoseValues.slice(interJump * 2);\nfor(let i = 0; i < interJump; i++){\n    interBGArray.push(partArray1[i], partArray2[i], partArray3[i]);\n}\nconsole.log(\"INTER =\", interBGArray);\nconsole.log(\"BG = \", glucoseValues);\n//////////////////////////////////\n// create new arrays with values to feed into visuals and sounds through scaling/linear interpolation\n//from: https://stackoverflow.com/questions/14224535/scaling-between-two-number-ranges\nfunction convertRange(value, r1, r2) {\n    return (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n}\nconst maxBG = Math.max(...glucoseValues);\nconst minBG = Math.min(...glucoseValues);\n//arrays for use with visuals and audio (not dedicated, use as appropriate)\nconst bgRange01 = glucoseValues.map((num)=>convertRange(num, [\n        minBG,\n        maxBG\n    ], [\n        0,\n        1\n    ]));\nconst bgRange9 = glucoseValues.map((num)=>convertRange(num, [\n        minBG,\n        maxBG\n    ], [\n        0,\n        9\n    ]));\nconst bgRange310 = glucoseValues.map((num)=>convertRange(num, [\n        minBG,\n        maxBG\n    ], [\n        0.0001,\n        0.01\n    ]));\nconst bgRange100 = glucoseValues.map((num)=>convertRange(num, [\n        minBG,\n        maxBG\n    ], [\n        0.01,\n        0.1\n    ]));\nconst bgRange300 = glucoseValues.map((num)=>convertRange(num, [\n        minBG,\n        maxBG\n    ], [\n        0.0001,\n        0.1\n    ]));\n//SCALE_MAKING (with help from https://www.guitarland.com/MusicTheoryWithToneJS/PlayModes.html)\nconst majorFormula = [\n    0,\n    2,\n    4,\n    5,\n    7,\n    9,\n    11\n];\nconst modeNames = [\n    \"major\",\n    \"dorian\",\n    \"phrygian\",\n    \"lydian\",\n    \"mixolydian\",\n    \"aeolian\",\n    \"locrian\"\n];\nconst myModeNum = calcMode;\nconst myKey = calcKey;\nconst myModeFormula = makeModeFormula(majorFormula, myModeNum, myKey, 11);\n//parentScaleFormula is interval spacings to be repeated (ex. majorFormula), modeNum picks which interval to use as root (hence selects mode), root is pitch class (i.e key) base MIDI note from 0-11, formulaLength allows for creating longer and shorter repetitions of the interval spacings\nfunction makeModeFormula(parentScaleFormula, modeNum) {\n    let root = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, formulaLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 9;\n    let scaleIndex = 0;\n    let modeFormula = [];\n    let modeInterval;\n    for(let i = 0; i < parentScaleFormula.length * formulaLength; i++){\n        scaleIndex = (i + modeNum) % parentScaleFormula.length;\n        modeInterval = (parentScaleFormula[scaleIndex] - parentScaleFormula[modeNum] + 12) % 12;\n        modeInterval = modeInterval + root + Math.floor(i / parentScaleFormula.length) * 12;\n        modeFormula.push(modeInterval);\n    }\n    console.log(\"mode=\" + modeNames[modeNum] + \" formula=\" + modeFormula.toString());\n    return modeFormula;\n}\n//modeFormula = the result of the modeMakeFormula\n//upperLimit = how many scaleDegrees and hence intervals to spread the notes out over, my recommended approach is to take the length of the majorFormula (or whatever base interval formula being used) and multiply by the desired number of octaves to spread out over.\n//baseOctave = what octave to start at\nfunction convertBGtoNotes(modeFormula, upperLimit) {\n    let baseOctave = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    let bgScaleDegs;\n    let bgIntervals;\n    bgScaleDegs = glucoseValues.map((num)=>Math.round(convertRange(num, [\n            minBG,\n            maxBG\n        ], [\n            0,\n            upperLimit - 1\n        ])));\n    bgIntervals = bgScaleDegs.map((num)=>modeFormula[num] + baseOctave * 12);\n    return bgIntervals;\n}\n//create a synth and connect it to the main output (your speakers)\nconst reverbA = new tone__WEBPACK_IMPORTED_MODULE_0__.Reverb(5);\nconst panVolS1 = new tone__WEBPACK_IMPORTED_MODULE_0__.PanVol(-0.7, 0).toDestination();\nconst panVolS2 = new tone__WEBPACK_IMPORTED_MODULE_0__.PanVol(0.7, 0).toDestination();\nconst panVolS3 = new tone__WEBPACK_IMPORTED_MODULE_0__.PanVol(0, 0).toDestination();\nconst panVolK1 = new tone__WEBPACK_IMPORTED_MODULE_0__.PanVol(0, -6).toDestination();\nconst kickSynth = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth();\nconst synth = new tone__WEBPACK_IMPORTED_MODULE_0__.PluckSynth();\nconst synth2 = new tone__WEBPACK_IMPORTED_MODULE_0__.PluckSynth();\nconst synth3 = new tone__WEBPACK_IMPORTED_MODULE_0__.PluckSynth();\nconst fmSynth = new tone__WEBPACK_IMPORTED_MODULE_0__.FMSynth();\nconst fmSynth2 = new tone__WEBPACK_IMPORTED_MODULE_0__.FMSynth();\nconst fmSynth3 = new tone__WEBPACK_IMPORTED_MODULE_0__.FMSynth();\nconst fmMIOffset = 50;\nconst fmSwell = new tone__WEBPACK_IMPORTED_MODULE_0__.FMSynth();\nfmSwell.set({\n    harmonicity: 0.5,\n    modulationIndex: 5,\n    envelope: {\n        attack: 0.01\n    },\n    modulationEnvelope: {\n        attack: 0.1,\n        decay: 1.5,\n        sustain: 0.1\n    },\n    modulation: {\n        type: \"triangle8\"\n    },\n    oscillator: {\n        type: \"triangle13\"\n    }\n});\nsynth.connect(panVolS1);\nsynth.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nsynth2.connect(panVolS2);\nsynth2.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nsynth3.connect(panVolS3);\nsynth3.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nfmSynth.connect(panVolS1);\nfmSynth.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nfmSynth2.connect(panVolS2);\nfmSynth2.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nfmSynth3.connect(panVolS3);\nfmSynth3.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nfmSwell.connect(panVolS1);\nfmSwell.chain(reverbA, tone__WEBPACK_IMPORTED_MODULE_0__.Destination);\nkickSynth.connect(panVolK1);\n// * simple\nconst playSimple = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    //debugging:\n    console.log(glucoseValues.map((x)=>x * 10));\n    //console.log(Tone);\n    //play a middle 'C' for the duration of an 8th note\n    _Visuals__WEBPACK_IMPORTED_MODULE_1__.start();\n    //Visuals.fx4(function(){return Math.random()*10});\n    // Visuals.fx3(20, 0.5)\n    _Visuals__WEBPACK_IMPORTED_MODULE_1__.fx5(glucoseValues.map((x)=>x * 10), glucoseValues, 0.6, 0.5);\n    synth.triggerAttackRelease(\"C3\", \"8n\");\n    //this works\n    for(let i = 0; i < _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data.length; i++){\n        let bg = _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data[i].glucose;\n        if (bg >= 8.0) {\n            console.log(\"high \", i, _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data[i].glucose);\n        //do something here\n        } else if (bg <= 7.9 && bg >= 4.0) {\n            console.log(\"target \", i, _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data[i].glucose);\n        //do something here\n        } else if (bg < 4.0) {\n            console.log(\"low \", i, _data_CGMdata1__WEBPACK_IMPORTED_MODULE_2__.data[i].glucose);\n        //do something here\n        }\n    }\n};\n// * simple double\nconst playTimeControl = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    const now = tone__WEBPACK_IMPORTED_MODULE_0__.now();\n    // trigger the attack immediately\n    //!synth.triggerAttack('C4', now);\n    // wait one second before triggering the release\n    //! synth.triggerRelease(now + 3);\n    synth.triggerAttackRelease(\"G2\", \"1n\", now + 1, 1);\n};\n// * Sequence\nconst playSquence = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    //FFT analyzes the audio output, can use the numbers it returns to do stuff to the visuals\n    const fft = new tone__WEBPACK_IMPORTED_MODULE_0__.FFT(16);\n    fmSwell.connect(fft);\n    fft.set({\n        normalRange: true,\n        smoothing: 0.8\n    });\n    let counterS1Vel = 0;\n    let counterS2Vel = 0;\n    let counterS3Vel = 0;\n    const bgMIDI = convertBGtoNotes(myModeFormula, majorFormula.length * 3, 4);\n    const bgFreqs = bgMIDI.map((num)=>tone__WEBPACK_IMPORTED_MODULE_0__.mtof(num));\n    console.log(bgFreqs);\n    _Visuals__WEBPACK_IMPORTED_MODULE_1__.start();\n    //Visuals.fx5(glucoseValues.map(x=> x * 10), glucoseValues, 0.6, 0.5);\n    //Visuals.fx3(2, 0.6)\n    _Visuals__WEBPACK_IMPORTED_MODULE_1__.fx8(bgRange01, fftNorm);\n    //Visuals.fx8t();\n    //Visuals.fx8simple();\n    //Visuals.fx9ease();\n    //bgVisEvent(now);\n    //k is # of pulses, n is # of slots, c is notename as String (ex. \"C3\"); this is for creating rhythms from the data\n    function bjorklund(k, n, c) {\n        //returns k pulses (1s) followed by n-k rests (0s)\n        let seq = lodash__WEBPACK_IMPORTED_MODULE_3___default().times(k, lodash__WEBPACK_IMPORTED_MODULE_3___default().constant([\n            1\n        ])).concat(lodash__WEBPACK_IMPORTED_MODULE_3___default().times(n - k, lodash__WEBPACK_IMPORTED_MODULE_3___default().constant([\n            0\n        ])));\n        //console.log(_.times(k, _.constant([1])).concat(_.times(n - k, _.constant([0]))))\n        while(true){\n            //sets two variables to partition the values in the seq\n            let [head, remainder] = lodash__WEBPACK_IMPORTED_MODULE_3___default().partition(seq, (i)=>lodash__WEBPACK_IMPORTED_MODULE_3___default().isEqual(i, seq[0]));\n            //console.log(head, remainder, seq);\n            if (remainder.length < 2) break;\n            for(let i = 0; i < Math.min(head.length, remainder.length); i++){\n                seq[i] = seq[i].concat(seq.pop());\n            }\n        }\n        return lodash__WEBPACK_IMPORTED_MODULE_3___default().flatten(seq).map(function(value) {\n            if (value == 1) {\n                return c;\n            } else {\n                return null;\n            }\n        });\n    }\n    let notes = [];\n    let notes2 = [];\n    let notes3 = [];\n    let kick = [];\n    // create a new sequence with the synth and notes\n    const synthPart = new tone__WEBPACK_IMPORTED_MODULE_0__.Sequence(function(time, note) {\n        fmSynth.triggerAttackRelease(note, \"64n\", time, bgRange01[counterS1Vel % bgRange01.length]);\n        console.log(\"synthPart1\");\n        //this is a way of inserting other variable changes on a per note basis\n        //need to delete this if you want it to happen every bjorklund switch instead of note switch\n        /* fmSynth.set({\n      harmonicity: 1.5,\n      modulationIndex: 5,\n      envelope: {attack: 0.01},\n      modulationEnvelope: {attack: 0.1,\n      decay: 0.25,\n      sustain: 0.1},\n      modulation: {type: \"sine\"},\n      oscillator: {type: \"sine\"}\n      }) */ counterS1Vel++;\n    }, notes, \"8n\");\n    // create a new sequence with the synth and notes\n    const synthPart2 = new tone__WEBPACK_IMPORTED_MODULE_0__.Sequence(function(time, note) {\n        fmSynth2.triggerAttackRelease(note, \"64n\", time, bgRange01[counterS2Vel % bgRange01.length]);\n        console.log(\"synthPart2\");\n        counterS2Vel++;\n    }, notes2, \"8n\");\n    // create a new sequence with the synth and notes\n    const synthPart3 = new tone__WEBPACK_IMPORTED_MODULE_0__.Sequence(function(time, note) {\n        fmSynth3.triggerAttackRelease(note, \"64n\", time, bgRange01[counterS3Vel % bgRange01.length]);\n        console.log(\"synthPart3\");\n        counterS3Vel++;\n    }, notes3, \"8n\");\n    // create a new sequence with the synth and notes\n    const kickPart = new tone__WEBPACK_IMPORTED_MODULE_0__.Sequence(function(time, note) {\n        kickSynth.triggerAttackRelease(note, \"16n\", time);\n    }, kick, \"2n\");\n    // Setup the synth to be ready to play on beat 1\n    synthPart.start();\n    synthPart2.start();\n    synthPart3.start();\n    kickPart.start();\n    // Note that if you pass a time into the start method \n    // you can specify when the synth part starts \n    // e.g. .start('8n') will start after 1 eighth note// start the transport which controls the main timeline\n    //Set the BPM and start the transport\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = calcBPM;\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n    //function for punctual events that will happen on top of the Euclidean rhythms created by the Bjorklund function\n    function swellFMEvent1(s, freq, atk, dur) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            fmSwell.triggerAttackRelease(freq, dur);\n            fmSwell.set({\n                harmonicity: 0.5,\n                modulationIndex: 5,\n                envelope: {\n                    attack: atk\n                },\n                modulationEnvelope: {\n                    attack: atk,\n                    decay: 1.5,\n                    sustain: 0.1\n                },\n                modulation: {\n                    type: \"triangle8\"\n                },\n                oscillator: {\n                    type: \"triangle13\"\n                }\n            });\n        }, s);\n    }\n    function timbreShift(s, synthName, harmon, modindex) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            synthName.set({\n                harmonicity: harmon,\n                modulationIndex: modindex,\n                envelope: {\n                    attack: 0.001,\n                    decay: 0.005\n                },\n                modulationEnvelope: {\n                    attack: 0.001,\n                    decay: 0.05,\n                    sustain: 0\n                },\n                modulation: {\n                    type: \"sine\"\n                },\n                oscillator: {\n                    type: \"sine\"\n                }\n            });\n        }, s);\n    }\n    //function for scheduling changes in the Bjorklund rhythm of the specified synth part and any other change that would be synchornized with these changes\n    //s is for shedule - the time at which it happens; n is the BG number\n    function bgEvent(s, n, freq) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            synthPart.events = bjorklund(bgSplitMin(n), bgSplitMax(n), freq);\n            console.log(synthPart.events);\n            console.log(n);\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n            // do drawing or DOM manipulation here\n            // Visuals.fx3(/*function(){let y =  fft.getValue(); return y[1]*1000 + 1}*/s, function(){let y =  fft.getValue(); return y[0]*10});\n            //Visuals.fx5(n, n, fftNorm, n*0.05)\t\n            //console.log(time);\n            }, time);\n        }, s);\n    }\n    //little function to get fft data values roughly between 0 and 1 - can change multiplier for different ranges etc.\n    //Q- how can your perform an operation (multiply) on the value returned from a function?\n    function fftNorm() {\n        let y = fft.getValue();\n        return y[0] * 10;\n    }\n    //function for scheduling changes in the Bjorklund rhythm of the specified synth part and any other change that would be synchornized with these changes\n    function bgEvent2(s, n, freq) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            synthPart2.events = bjorklund(bgSplitMin(n), bgSplitMax(n), freq);\n            console.log(synthPart2.events);\n            console.log(n);\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n            // do drawing or DOM manipulation here\n            // Visuals.fx3(/*function(){let y =  fft.getValue(); return y[1]*1000 + 1}*/s, function(){let y =  fft.getValue(); return y[0]*10});\n            //\tVisuals.fx2(),\t\n            //console.log(time);\n            }, time);\n        }, s);\n    }\n    //function for scheduling changes in the Bjorklund rhythm of the specified synth part and any other change that would be synchornized with these changes\n    function bgEvent3(s, n, freq) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            synthPart3.events = bjorklund(bgSplitMin(n), bgSplitMax(n), freq);\n            console.log(synthPart3.events);\n            console.log(n);\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n            // do drawing or DOM manipulation here\n            // Visuals.fx3(/*function(){let y =  fft.getValue(); return y[1]*1000 + 1}*/s, function(){let y =  fft.getValue(); return y[0]*10});\n            //\tVisuals.fx4(n),\t\n            //console.log(time);\n            }, time);\n        }, s);\n    }\n    //function for scheduling changes in the Bjorklund rhythm of the specified synth part and any other change that would be synchornized with these changes\n    function bgEvent4(s, n, freq) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            kickPart.events = bjorklund(bgSplitMin(n), bgSplitMax(n), freq);\n            console.log(kickPart.events);\n            console.log(n);\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n            // do drawing or DOM manipulation here\n            // Visuals.fx3(/*function(){let y =  fft.getValue(); return y[1]*1000 + 1}*/s, function(){let y =  fft.getValue(); return y[0]*10});\n            //\tVisuals.fx4(n),\t\n            //console.log(time);\n            }, time);\n        }, s);\n    }\n    //helper functions for the bgEvent functions, Min splits the BG number at the decimal and returns the smaller of the two resulting integers, Max returns the larger\n    function bgSplitMin(n) {\n        return Math.min(Math.round(n % 1 * 10), Math.floor(n));\n    }\n    function bgSplitMax(n) {\n        return Math.max(Math.round(n % 1 * 10), Math.floor(n));\n    }\n    //function for scheduling changes in the visuals\n    //  s is when it will happen - when it is scheduled for.\n    function bgVisEvent(s) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n                // do drawing or DOM manipulation here\n                _Visuals__WEBPACK_IMPORTED_MODULE_1__.fx8();\n                console.log(time);\n            }, time);\n        }, s);\n    }\n    //function for scheduling changes in the visuals\n    //  s is when it will happen - when it is scheduled for.\n    function bgVisEvent2(s, g, inv, sat, nn, ns, rot, lthrsh, ltol) {\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n            tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(()=>{\n                // do drawing or DOM manipulation here\n                _Visuals__WEBPACK_IMPORTED_MODULE_1__.fx7(g, inv, sat, nn, ns, rot, lthrsh, ltol);\n                console.log(time);\n            }, time);\n        }, s);\n    }\n    // this works as a basic organizational logic - still need to work out coordination of sound and visual events which might not always change at the same time\n    //with the current BG events they keep going with their current data until they receive a change\n    //first variable of the BG event is when it is scheduled to happen, second is the BG value\n    //Overarching strucutre of the generative composition: 1) create as many Time counters as necessary; a new Time counter is necessary for any change that doesn't happen at the same time as an existing change (which will already have its own Time counter)\n    //2) Using a for loop, go through all the glucose values and create a score from that; this is where the timing of changes is determined, as well as what data is fed into the functions to determine what the changes are\n    let bgTime = 0;\n    let bgTimeB = 0; //if you don't want everything to start at once you can make an offset (ex. set bgTimeB to glucoseValues[1])\n    let bgTimeC = 0; //if you don't want everything to start at once you can make an offset (ex. set bgTimeC to glucoseValues[2])\n    let bgTime2 = 0;\n    //FIGURE OUT HOW TO LOOP\n    for(let i = 0; i < glucoseValues.length; i++){\n        let bg = glucoseValues[i];\n        //conditional statements to allow the possibility of different things happening depending on whether the BG reading is high, on target, or low (could add more conditions and/or change existing thresholds)\n        if (bg >= 8.0) {\n            console.log(\"high \", glucoseValues[i], bgTime, bgFreqs[i]);\n            //do something here\n            //swell event happens at the designated time and with the designated Frequecy value (multiplication by 0.5 would lower it by 1 octave)\n            swellFMEvent1(bgTime, bgFreqs[i] * 0.125, bgRange01[i], bgRange01[i] * 2);\n            //bgEvents are the Euclidean rhythms, here we determine when they change (ex. bgTime), what rhythm they change to (ex. glucoseValues[i]), and what frequency/note is played (ex. bg Freqs[i])\n            bgEvent(bgTime, glucoseValues[i], bgFreqs[i]);\n            timbreShift(bgTime, fmSynth, 1.5, fmMIOffset * bgRange01[i]);\n            bgEvent2(bgTimeB, glucoseValues[(i + 1) % glucoseValues.length], bgFreqs[(i + 1) % glucoseValues.length]);\n            timbreShift(bgTimeB, fmSynth2, 1.5, fmMIOffset * bgRange01[(i + 1) % glucoseValues.length]);\n            bgEvent3(bgTimeC, glucoseValues[(i + 2) % glucoseValues.length], bgFreqs[(i + 2) % glucoseValues.length]);\n            timbreShift(bgTimeC, fmSynth3, 1.5, fmMIOffset * bgRange01[(i + 2) % glucoseValues.length]);\n            bgEvent4(bgTime, glucoseValues[i], bgFreqs[i] * 0.125);\n        //scheduling of a change in the visuals, first variable determines when, the rest depend on the visual synth in question\n        //bgVisEvent2(bgTime2, bgRange01[i], bgRange01[i+1], bgRange9[i+2], bgRange9[i+7], bgRange01[i+3], bgRange310[i+4], bgRange100[i+5], bgRange300[i+6])\n        //bgVisEvent2(bgTime, bgRange01[i], bgRange01[i], bgRange9[i],bgRange9[i], bgRange01[i], bgRange310[i], bgRange100[i], bgRange300[i])\n        } else if (bg <= 7.9 && bg >= 4.0) {\n            console.log(\"target \", glucoseValues[i], bgTime, bgFreqs[i]);\n            //do something here\n            swellFMEvent1(bgTime, bgFreqs[i] * 0.125, bgRange01[i], bgRange01[i] * 5);\n            bgEvent(bgTime, glucoseValues[i], bgFreqs[i]);\n            timbreShift(bgTime, fmSynth, 1.5, fmMIOffset * bgRange01[i]);\n            bgEvent2(bgTimeB, glucoseValues[(i + 1) % glucoseValues.length], bgFreqs[(i + 1) % glucoseValues.length]);\n            timbreShift(bgTimeB, fmSynth2, 1.5, fmMIOffset * bgRange01[(i + 1) % glucoseValues.length]);\n            bgEvent3(bgTimeC, glucoseValues[(i + 2) % glucoseValues.length], bgFreqs[(i + 2) % glucoseValues.length]);\n            timbreShift(bgTimeC, fmSynth3, 1.5, fmMIOffset * bgRange01[(i + 2) % glucoseValues.length]);\n            bgEvent4(bgTime, glucoseValues[i], bgFreqs[i] * 0.125);\n        //bgVisEvent2(bgTime2, bgRange01[i], bgRange01[i+1], bgRange9[i+2], bgRange9[i+7], bgRange01[i+3], bgRange310[i+4], bgRange100[i+5], bgRange300[i+6])\n        // bgVisEvent2(bgTime, bgRange01[i], bgRange01[i], bgRange9[i],bgRange9[i], bgRange01[i], bgRange310[i], bgRange100[i], bgRange300[i])\n        } else if (bg < 4.0) {\n            console.log(\"low \", glucoseValues[i], bgTime, bgFreqs[i]);\n            //do something here\n            swellFMEvent1(bgTime, bgFreqs[i] * 0.125, bgRange01[i], bgRange01[i] * 2);\n            bgEvent(bgTime, glucoseValues[i], bgFreqs[i]);\n            timbreShift(bgTime, fmSynth, 1.5, fmMIOffset * bgRange01[i]);\n            bgEvent2(bgTimeB, glucoseValues[(i + 1) % glucoseValues.length], bgFreqs[(i + 1) % glucoseValues.length]);\n            timbreShift(bgTimeB, fmSynth2, 1.5, fmMIOffset * bgRange01[(i + 1) % glucoseValues.length]);\n            bgEvent3(bgTimeC, glucoseValues[(i + 2) % glucoseValues.length], bgFreqs[(i + 2) % glucoseValues.length]);\n            timbreShift(bgTimeC, fmSynth3, 1.5, fmMIOffset * bgRange01[(i + 2) % glucoseValues.length]);\n            bgEvent4(bgTime, glucoseValues[i], bgFreqs[i] * 0.125);\n        //bgVisEvent2(bgTime2, bgRange01[i], bgRange01[i+1], bgRange9[i+2], bgRange9[i+7], bgRange01[i+3], bgRange310[i+4], bgRange100[i+5], bgRange300[i+6])\n        // bgVisEvent2(bgTime, bgRange01[i], bgRange01[i], bgRange9[i],bgRange9[i], bgRange01[i], bgRange310[i], bgRange100[i], bgRange300[i])\n        }\n        //differences in timing for different streams of events\n        //multiplication factor determines how long to wait before changing\n        //addition in the bracket determines offset of BG value from dataset\n        bgTime = bgTime + glucoseValues[i] * 1;\n        bgTimeB = bgTimeB + glucoseValues[(i + 1) % glucoseValues.length] * 1; //need the modulo because of the offset (i+1), so it can wrap back around\n        bgTimeC = bgTimeC + glucoseValues[(i + 2) % glucoseValues.length] * 1; //need the modulo because of the offset (i+2), so it can wrap back around\n        bgTime2 = bgTime2 + glucoseValues[i] * 3;\n        console.log(\"bgTimeB\" + bgTimeB);\n        console.log(\"bgTimeC\" + bgTimeC);\n    }\n    console.log(\"bgTime\" + bgTime);\n    console.log(\"bgTimeB\" + bgTimeB);\n    console.log(\"bgTimeC\" + bgTimeC);\n    //console.log(calcBPM*bgTime*0.01667*0.25);\n    //console.log(calcBPM*bgTime*0.01667*0.25%Math.floor(calcBPM*bgTime*0.01667*0.25))\n    const bars = Math.floor(calcBPM * bgTime * 0.01667 * 0.25);\n    const beats = Math.floor(calcBPM * bgTime * 0.01667 * 0.25 % Math.floor(calcBPM * bgTime * 0.01667 * 0.25) * 4);\n    console.log(bars);\n    console.log(beats);\n    console.log(bars + \":\" + beats);\n    const endLoop = bars + \":\" + beats //4 + \":\" + 1;/*calcBPM*(bgTime+2.9+3.6+12)*0.01667*0.25*/\n    ;\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.setLoopPoints(0, endLoop);\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.loop = true;\n};\n// *  Scheduling\nconst playScheduling = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    //proof of concept - the bgData numbers are rounded off and uses as indices for the notesArray in the Tone.Sequence below\n    const bgData = [\n        5.7,\n        2.3,\n        11.8,\n        9.5,\n        7.8\n    ];\n    const notesArray = [\n        \"C3\",\n        \"A3\",\n        \"G3\",\n        \"E3\",\n        \"C2\",\n        \"C3\",\n        \"A3\",\n        \"G3\",\n        \"E3\",\n        \"C2\",\n        \"C3\",\n        \"A3\",\n        \"G3\",\n        \"E3\",\n        \"C2\"\n    ];\n    const synthA = new tone__WEBPACK_IMPORTED_MODULE_0__.FMSynth().toDestination();\n    const synthB = new tone__WEBPACK_IMPORTED_MODULE_0__.AMSynth().toDestination();\n    //play a note every quarter-note\n    /*const loopA = new Tone.Loop((time) => {\n    synthA.triggerAttackRelease('C2', '8n', time);\n  }, '4n').start(0);*/ const seq = new tone__WEBPACK_IMPORTED_MODULE_0__.Sequence((time, note)=>{\n        synthA.triggerAttackRelease(note, 0.1, time);\n    // subdivisions are given as subarrays\n    }, [\n        notesArray[Math.round(bgData[0])],\n        [\n            notesArray[1],\n            notesArray[2],\n            notesArray[3]\n        ],\n        notesArray[Math.round(bgData[3])],\n        [\n            notesArray[3],\n            notesArray[4]\n        ]\n    ]).start(0);\n    //play another note every off quarter-note, by starting it \"8n\"\n    const loopB = new tone__WEBPACK_IMPORTED_MODULE_0__.Loop((time)=>{\n        synthB.triggerAttackRelease(\"G2\", \"8n\", time);\n    }, \"4n\").start(\"8n\");\n    // all loops start until the Transport is started\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = 80;\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n    //Tone.Transport.start(\"+1\", \"2:0:0\");// this works\n    // schedule an event on the 2nd measure\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n        // invoked on measure 2\n        console.log(\"measure 2!\");\n        seq.stop();\n        //synthB.envelope.attack = 0.6;\n        synthB.set({\n            harmonicity: 0.1,\n            envelope: {\n                attack: 0.1,\n                release: 0.1\n            }\n        });\n    //Tone.Transport.bpm.value = 140;// not sure how to make this work properly\n    }, \"2:0:0\");\n    // schedule an event on the 4th measure\n    tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule((time)=>{\n        // invoked on measure 2\n        // loopA.stop(time);\n        console.log(\"measure 4!\");\n        //synthB.setNote('F3');\n        seq.start();\n        //synthB.envelope.attack = 0.6;\n        synthB.harmonicity.rampTo(15, 2);\n    //synthB.harmonicity.value = 15;\n    }, \"4:0:0\");\n};\n//*  Instruments\nconst playInstruments = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    //pass in some initial values for the filter and filter envelope\n    const synth = new tone__WEBPACK_IMPORTED_MODULE_0__.PolySynth(tone__WEBPACK_IMPORTED_MODULE_0__.Synth).toDestination();\n    const now = tone__WEBPACK_IMPORTED_MODULE_0__.now();\n    synth.triggerAttack(\"D4\", now);\n    synth.triggerAttack(\"F4\", now + 0.5);\n    synth.triggerAttack(\"A4\", now + 1);\n    synth.triggerAttack(\"C4\", now + 1.5);\n    synth.triggerAttack(\"E4\", now + 2);\n    synth.triggerRelease([\n        \"D4\",\n        \"F4\",\n        \"A4\",\n        \"C4\",\n        \"E4\"\n    ], now + 4);\n};\n//*  Samples\nconst playSamples = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    const player = new tone__WEBPACK_IMPORTED_MODULE_0__.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n    tone__WEBPACK_IMPORTED_MODULE_0__.loaded().then(()=>{\n        player.start();\n    });\n};\n//*  Sampler\nconst playSampler = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    const sampler = new tone__WEBPACK_IMPORTED_MODULE_0__.Sampler({\n        urls: {\n            C4: \"C4.mp3\",\n            \"D#4\": \"Ds4.mp3\",\n            \"F#4\": \"Fs4.mp3\",\n            A4: \"A4.mp3\"\n        },\n        baseUrl: \"https://tonejs.github.io/audio/salamander/\"\n    }).toDestination();\n    tone__WEBPACK_IMPORTED_MODULE_0__.loaded().then(()=>{\n        sampler.triggerAttackRelease([\n            \"Eb4\",\n            \"G4\",\n            \"Bb4\"\n        ], 0.5);\n    });\n};\n//*  Efects\nconst playEffectts = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    const player = new tone__WEBPACK_IMPORTED_MODULE_0__.Player({\n        url: \"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\",\n        loop: false,\n        autostart: true\n    });\n    //create a distortion effect\n    const distortion = new tone__WEBPACK_IMPORTED_MODULE_0__.Distortion(0.4).toDestination();\n    //connect a player to the distortion\n    player.connect(distortion);\n};\n//*  Signals\nconst playSignal = async ()=>{\n    await tone__WEBPACK_IMPORTED_MODULE_0__.start();\n    const osc = new tone__WEBPACK_IMPORTED_MODULE_0__.Oscillator().toDestination();\n    // start at \"C4\"\n    osc.frequency.value = \"C4\";\n    // ramp to \"C5\" over 2 seconds\n    osc.frequency.rampTo(\"C5\", 2);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./frontend/playground/Sound.ts\n"));

/***/ })

});